People = {}
Functions = {
	"Original Artist": "TOPE",
	"Composer": "TCOM",
	"Lyricist": "TOLY",
	"Lyricist": "TEXT",				# if not "Original Lyricist"
	"Conductor": "TPE3",
	"Album Artist": "TPE2",
	"Remix": "TPE4"
}

for Key, Value in Functions.items():
	if Value in Tags:
		People.update({__FixTitle(Key): __FixTitle(", ".join(Tags[Value].text))})

# Involved people
for Person in ["TMCL", "TIPL"]:
	if Person in Tags:
		for Element in Tags[Person].people:
			People[__FixTitle(Element[0])] = __FixTitle(Element[1])

People = [f"{Key}: {Value}" for Key, Value in People.items()]
#People = sorted(People, key = len)
People = "\n".join(People)

#-=-=-=-#

Criterias = {
	"Title": "TIT2",
	"Artist": "TPE1",
	"Album": "TALB",
	"Year": "TDRC",
	"Release Date": "TDRL",
	#"Label": "TPUB"
}

# If not "Release Date"
if not "TRDL" in Tags:
	Criterias["Release Date"] = "TDRC"

Unsufficient = 0
for Name, Element in Criterias.items():
	if Element in Tags:
		exec(f'Tags_{Element} = str(Tags["{Element}"])')
	else:
		print('{3}<WARNING>{4} | {2}Couldn\'t create description - ID3 "{0}" field missing ("{1}")'.format(
			Element, Name,
			Styles.Warning, Styles.Info, Styles.Reset
			)
		)
		Unsufficient = 1
		break

try:
	# If not "Release Date"
	try:
		_ = Tags_TDRL
	except NameError:
		Tags_TDRL = str(dt.now()).split(" ")[0]

	# If not "Label"
	try:
		_ = Tags_TPUB
	except NameError:
		Tags_TPUB = "<Insert Label Name>"

	# Delimiting additional artists
	for Delimiter, Featuring in {"|": ("&", "ft", "ft.", "feat", "feat.")}.items():
		for Word in Featuring:
				Tags_TPE1 = Delimiter.join(Tags_TPE1.split(f" {Word} "))

	Tags_TPE1 = Tags_TPE1.split(Delimiter)
	Tags_TPE1 = [Artist.strip() for Artist in Tags_TPE1]
	Tags_TPE1 = " · ".join(Tags_TPE1)

	#-=-=-=-#

	Description = """
	Provided to YouTube by YTMVG
	{0} · {1}
	{2}
	℗ {3} {5}
	Released on: {4}{6}
	Auto-generated by YTMVG.
	"""

	if not Unsufficient:
		Description = Description[1:-1].replace("\t", "").split("\n")
		Description = "\n\n".join(Description)
		Description = Description.format(
			Tags_TIT2, Tags_TPE1, Tags_TALB,
			Tags_TDRC, Tags_TDRL,
			Tags_TPUB, "\n\n" + People
		)

		Text_File = os.path.join(Final_Directory, "Description.txt")
		with open(Text_File, "w", encoding = "U8") as File:
			File.write(Description)
except:
	pass