Audio_MIME = Audio_File.mime[0].split("/")[-1].upper()

Description = """
Provided to YouTube by {0}
{1} · {2}
{3}
℗ {4} {5}
Released on: {6}
{7}
Auto-generated by {0}.
"""

Audio_Tags_List = {
	"FLAC": {
		"Title": "title",
		"Artist": "artist",
		"Album": "album",
		"Year": "date",
		"Organization": "organization",
		"Composer": "composer",
		"Conductor": "conductor",
		"Lyricist": "lyricist",
		"Remixer": "version",
	},
	"MP3": {
		"Title": "TIT2",
		"Artist": "TPE1",
		"Album": "TALB",
		"Year": "TDRC",
		"Organization": "TPUB",
		"Composer": "TCOM",
		"Conductor": "TPE3",
		"Lyricist": "TEXT",
		"Remixer": "TPE4",
	}
}

# FLAC and Ogg (VORBIS) keys are equivalent
Audio_Tags_List["VORBIS"] = Audio_Tags_List["FLAC"]

try:
	try:
		Audio_Tags = Audio_File.tags
		if not Audio_Tags:
			Traceback = "no audio tags were detected"
			raise Exception
	except Exception as Error:
		Traceback = " - {0}".format(Error[0].capitalize() + Error[1:])
		raise Exception
except Exception:
	print("{2}<WARNING> {1}Couldn't create description file - {0}.{3}".format(
		Traceback.rstrip("."),
		Styles.Warning, Styles.Info, Styles.Reset
		)
	)

if Audio_Tags:
	Text_File = os.path.join(Final_Directory, "Description.txt")
	exec(open_("Process/Description/Main"))